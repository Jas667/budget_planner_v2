openapi: 3.0.1
info:
  title: personal_budget_v2
  version: 1.0.0
  description: >-
    Codecademy project building a personal budget application using node,
    express, postgresql, and js
paths:
  /categories/:
    summary: Work with categories
    description: >-
      Working with all category envelopes, getting them from the categories
      table
    get:
      summary: GET all categories
      description: GET all category envelopes from categories table and return to user
      operationId: getAllCategories
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
              examples:
                get all categories:
                  value: >-
                    {id: 1, name: "Petrol", assigned_budget: 500,
                    remaining_budget: 200}, {id: 2, name: "Food",
                    assigned_budget: 400, remaining_budget: 100}
    post:
      summary: POST a new category to the categories table
      description: >-
        POST a new category to the categories table. User will be returned
        confirmation the category was created
      operationId: postNewCategory
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
              examples:
                successful category creation:
                  value: '{created: "Category created!"}'
  /categories/{id}:
    summary: Get single category envelope
    description: Work with user selected category, selected by ID parameter
    get:
      summary: GET category by ID
      description: Get single category envelope by user selected ID
      parameters:
        - name: id
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      operationId: getCategoryById
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
              examples:
                return single category by id:
                  value: >-
                    {id: 1, name: "Petrol", assigned_budget: 200,
                    remaining_budget: 50}
    delete:
      summary: Delete category by ID
      description: >-
        User selected ID will delete matching category from table and cascade
        collapse matching expenses table
      parameters:
        - name: id
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      operationId: deleteCategory
      responses:
        '204':
          description: Default error sample response
          content:
            application/json:
              examples:
                deleted:
                  value: '{deleted: "Deleted successfully!"}'
    put:
      summary: Update category
      description: >-
        Category is selected using ID as identifier. Category is then updated in
        the category table from supplued json input
      parameters:
        - name: id
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      operationId: updateCategory
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
              examples:
                updated successfully:
                  value: '{Updated: "Updated successfully!"}'
  /expenses/:
    summary: Work with expenses of categories
    description: >-
      Working with the expenses that make up each category. All expenses will be
      stored in tables relating to their category
    get:
      summary: GET all expenses
      description: GET all expenses from all categories from each individual expenses table
      operationId: getAllExpenses
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
              examples:
                all expenses get:
                  value: >-
                    {id: 1, category: "Petrol", amount: 34, dateOfExpense:
                    10/10/23}, {id: 2, category: "Food", amount: 34,
                    dateOfExpense: 10/10/23}
    post:
      summary: ADD new expense
      description: >-
        User provided json input which is used to create a new expense linked to
        appropriate category
      operationId: newExpense
      responses:
        '201':
          description: Default error sample response
          content:
            application/json:
              examples:
                expense created:
                  value: '{created: "Expense created successfully!"}'
  /expenses/{id}:
    summary: expensed by id
    description: Work with individual expenses selected by ID
    parameters:
      - name: id
        in: path
        description: id of expense to return
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: GET expense by ID
      description: >-
        GET request using user input to select expense by ID from appropriate
        expenses table
      operationId: getExpenseById
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
              examples:
                single expense response:
                  value: >-
                    {id: 1, category: "Petrol", amount: 34, dateOfExpense:
                    10/10/23}
    delete:
      summary: DELETE expense by ID
      description: DELETE individual expense from user selected ID
      operationId: deleteById
      responses:
        '204':
          description: Default error sample response
          content:
            application/json:
              examples:
                expense deleted:
                  value: '{deleted: "Expense deleted successfully!"}'
    put:
      summary: UPDATE expense by ID
      description: Update an expense using user input, selected using expense unique ID
      operationId: updateExpense
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
              examples:
                expense updated:
                  value: '{updated: "Expense updated successfully"}'
  /expenses/category/{id}:
    summary: GET expenses by category
    description: GET all expenses for a selected category
    parameters:
      - name: id
        in: path
        description: id of expense to return
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: GET expenses by category
      description: >-
        GET all expenses from a particular category. Selected by category ID
        chosen by user
      operationId: getAllExpensesForCategory
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
              examples:
                get expenses by category:
                  value: >-
                    {id: 1, category: "Petrol", amount: 80, date: 09/10/23},
                    {id: 2, category: "Petrol", amount: 50, date: 10/10/23}
